---
#
# Copyright (c) 2022 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# ROLE DESCRIPTION:
#   This role is used to validate input and prepare environment on the target host
#   for packages/images prestaging.
#

- name: Fail if software version for images prestaging is not specified
  fail:
    msg: "Please specify software version for images prestaging."
  when: software_version is not defined

- name: Set prestage software version and cleanup directores fact
  set_fact:
    prestage_software_version: "{{ software_version }}"
    cleanup_dirs: "{{ cleanup_dirs|default([]) + [software_version] }}"

- name: Set prestage dir and subdirectory facts
  set_fact:
    prestage_reason: upgrade
    prestage_dir: "{{ platform_backup_dir }}/{{ prestage_software_version }}"
    packages_prestage_dir: "{{ platform_backup_dir }}/{{ prestage_software_version }}/Packages"
    repodata_prestage_dir: "{{ platform_backup_dir }}/{{ prestage_software_version }}/repodata"

- name: Retrieve current software version of the host
  shell: source /etc/platform/openrc;
    system show | grep software_version | awk '{print $4}'
  register: current_software_version

- name: Set host_software_version fact
  set_fact:
    host_software_version: "{{ current_software_version.stdout }}"

- name: Fail if specified software version is older than the one on the target
  fail:
    msg: >-
      Invalid software version for prestaging. The host is running a newer
      software version ({{ host_software_version}}) than the specified software version.
  when: host_software_version is version(prestage_software_version, 'gt')

- name: Update prestage reason
  set_fact:
    prestage_reason: reinstall
  when: prestage_software_version == host_software_version

- block:
  - name: Look for packages_prestage_completed flag
    stat:
      path: "{{ prestage_dir }}/.packages_prestage_completed"
    register: packages_prestage_completed_flag

  - block:
    - debug:
        msg: "Skipping packages prestaging as it was already completed."
    - meta: end_play
    when: packages_prestage_completed_flag.stat.exists
  when: prestage_type == "packages"

- block:
  - name: Verify that the images list file exists if provided
    stat:
      path: "{{ image_list_file }}"
    register: check_result
    connection: local

  - name: Fail if the specified image list doesn't exist
    fail:
      msg: "Images list file {{ image_list_file }} does not exist!"
    when: not check_result.stat.exists

  - name: Create a temp file
    tempfile:
      state: file
      suffix: prestage
    register: image_list_tempfile

  - name: Copy the content of images list to the temp file on target
    copy:
      src: "{{ image_list_file }}"
      dest: "{{ image_list_tempfile.path }}"

  - name: Remove blank lines, comments, markers from images temp file
    command: sed -i -e '/^$/d; /#/d; /\[/d' {{ image_list_tempfile.path }}
    args:
      warn: false

  - name: Remove extra fields from images temp file
    command: sed -i 's/,.*//' {{ image_list_tempfile.path }}
    args:
      warn: false

  - name: Read in the images temp file content
    slurp:
      src: "{{ image_list_tempfile.path }}"
    register: slurped_file

  - name: Set image_list to the prepared file on the target
    set_fact:
      image_list: "{{ (slurped_file.content|b64decode|trim).split('\n') }}"

  - name: Remove the images list temp file
    file:
      path: "{{ image_list_tempfile.path }}"
      state: absent

  - name: Fail if the images list is empty
    fail:
      msg: "File {{ image_list_file }} contains no image references."
    when: image_list|length == 0 or image_list == ['']

  when: image_list_file is defined

- block:
  - debug:
      msg: "Skipping images prestaging for upgrade as images list is not specified."
  when: prestage_reason == 'upgrade' and image_list_file is undefined

- name: Update cleanup directories list if the prestage is for upgrade
  set_fact:
    cleanup_dirs: "{{ cleanup_dirs + [host_software_version] }}"
  when: prestage_reason == 'upgrade'

- name: Prepare platform-backup directory for prestaging
  include: cleanup_prestage_dir.yml
  loop: "{{ cleanup_dirs | flatten(1) }}"
  loop_control:
    loop_var: input_dir

- name: Prepare docker cache for prestaging
  command: docker image prune -af
  become: yes

- debug:
    msg: |
      Specified images list file: {{ image_list_file|default('not provided') }}
      Prestage reason: {{ prestage_reason }}
      Images list: {{ image_list }}
