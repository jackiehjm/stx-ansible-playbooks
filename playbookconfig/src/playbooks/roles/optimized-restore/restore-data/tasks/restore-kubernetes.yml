---
#
# Copyright (c) 2022-2023 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# SUB-TASKS DESCRIPTION:
#   Restore kubernetes service.
#   During restoration of kubernetes, images will be pushed to local
#   registry.  If the images were not included in the backup
#   they will be downloaded in the same way as during a bootstrap.

# Cluster host floating IP is required on subclouds for etcd restoration
- name: Get cluster host floating IP
  shell: |-
    source /etc/platform/openrc
    system addrpool-list --nowrap | grep cluster-host-subnet | cut -d'|' -f8
  failed_when: not cluster_vip.stdout
  register: cluster_vip

- name: Configure controller host addresses
  command: "ip addr add {{ cluster_vip.stdout_lines[0] }} dev lo scope host"

# We may need to update /etc/hosts because registry.central will not be
# available on system controllers or subclouds because dnsmasq is not brought up.
- name: Check if registry.central is present in sysinv
  shell: |-
    source /etc/platform/openrc
    system addrpool-list --nowrap | grep system-controller-oam-subnet | cut -d'|' -f8
  register: sc_oam_vip

- name: Add host route to registry.central if present
  lineinfile:
    path: /etc/hosts
    insertafter: EOF
    line: "{{ sc_oam_vip.stdout_lines[0].strip() }} registry.central"
  when: sc_oam_vip.stdout

- name: Get Kubernetes version
  import_role:
    name: common/get-kube-version

- name: Mount k8s bind mount
  import_role:
    name: common/k8s-bind-mount

- name: Enable kubelet
  systemd:
    name: kubelet
    state: stopped
    enabled: true

- name: Start containerd service
  systemd:
    name: containerd
    state: restarted

- name: Add original system images to download list
  block:
    # During backup, a snapshot of all the images in registry local
    # was taken.  We want to ensure that all those
    # images are redownloaded before running unlock after this playbook.
    # Image downloads for application re-applies shortly after
    # the host unlock impose a significant performance cost.
    - name: Attempt to read original image list from backup
      command:
        cmd: >
          tar --wildcards --use-compress-program=pigz -O -xf
          {{ platform_backup_fqpn | quote }} 'opt/*/system_image_list.yaml'
      args:
        warn: false
      failed_when: false
      register: system_image_list

    - name: Add original images to additional download list if found
      set_fact:
        backed_up_local_registry_images: "{{ (system_image_list.stdout | from_yaml).images }}"
      when: system_image_list.rc == 0

    - name: Display additional images for download
      debug:
        var: backed_up_local_registry_images
      when: system_image_list.rc == 0

  when: >
    restore_original_images|bool and
    not (migrate_platform_data is defined and migrate_platform_data)

# Running push-docker-images and bringup-kubemaster increases playbook time,
# but it decreases unlock time by around the same amount.
- name: Populate local image registry
  import_role:
    name: common/push-docker-images

- name: Check if var/lib/kublet is present in the backup
  command:
    cmd: "tar --use-compress-program=pigz -tf '{{ platform_backup_fqpn }}' var/lib/kubelet"
  args:
    warn: false
  failed_when: false
  register: kubelet_backup_found

- name: Restore var/lib/kublet from the backup
  command:
    # In the case where the backed-up CPU manager policy is 'static', the
    # state preserved in "var/lib/kubelet/cpu_manager_state" conflicts with
    # the default 'none' policy and causes kubelet to error out in the next
    # step. Excluding this file here is safe as it gets regenerated with
    # intended values after subsequent unlock after the restore playbook.
    cmd: "tar --use-compress-program=pigz -C / -xpf \
         '{{ platform_backup_fqpn }}' var/lib/kubelet \
         --exclude var/lib/kubelet/cpu_manager_state"
  args:
    warn: false
  when: kubelet_backup_found.rc == 0

- name: Bring up Kubernetes master
  import_role:
    name: common/bringup-kubemaster

- name: Start kubelet
  systemd:
    name: kubelet
    state: started
  retries: 3
  delay: 15

# Check if there is a default-registry-key for kube-system and create it when
# there is not during platform-restore process
- name: Get kube-system default registry key
  command: >-
    kubectl --kubeconfig=/etc/kubernetes/admin.conf get secret default-registry-key --namespace=kube-system
  failed_when: false
  register: kube_system_default_registry_key

- name: Create kube-system default registry key
  command: >-
    kubectl -n kube-system create secret docker-registry default-registry-key
      --docker-server={{ local_registry }}
      --docker-username={{ local_registry_credentials['username'] }}
      --docker-password={{ local_registry_credentials['password'] }}
  environment:
    KUBECONFIG: "/etc/kubernetes/admin.conf"
  when: kube_system_default_registry_key.rc != 0

- name: Get deployment namespace default registry key
  command: >-
    kubectl --kubeconfig=/etc/kubernetes/admin.conf get secret default-registry-key --namespace=deployment
  failed_when: false
  register: get_deployment_default_registry_key

- name: Copy default-registry-key to deployment namespace
  shell: >-
    kubectl get secret default-registry-key --namespace=kube-system -o yaml
    | sed 's/namespace: kube-system/namespace: deployment/'
    | kubectl apply --namespace=deployment -f -
  environment:
    KUBECONFIG: "/etc/kubernetes/admin.conf"
  when: get_deployment_default_registry_key.stdout == ""

- name: Restore helm service
  import_tasks: restore-helm.yml

# we need to restart sysinv conductor here because it seem to be caching old data
# this prevents it from interacting with a fresh kubernetes cluster. For example,
# if the user changes OAM network and forces the kubernetes cluster to be torn down
# and brought up again.
- name: Restart sysinv-conductor
  systemd:
    name: sysinv-conductor
    state: restarted
