---
#
# Copyright (c) 2019-2023 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# ROLE DESCRIPTION:
#   This role performs the following tasks:
#     1. Validate user input.
#     2. Verify that the target is in the right state for platform restore.
#     3. Transfer the backup tarball to the target if it is off-box, otherwise
#        copy it to the designated staging directory (/opt/platform-backup).
#     4. Extract the host override file from the tarball and load bootstrap
#        parameters in memory.
#     5. Create restore_in_progress flag.
#

- block:
  - name: Look for override backup file in the backup tarball
    shell: "tar --use-compress-program=pigz -tf {{ initial_backup_dir }}/{{ backup_filename }} | grep '_override_backup.yml'"
    args:
      warn: false
    failed_when: false
    register: search_result

  - name: Fail if override file is missing
    fail:
      msg: >
        Cannot find {{ initial_backup_dir }}/{{ backup_filename }}
        or the override file is missing in the backup tarball!
    when: search_result.rc != 0
  delegate_to: "{{ inspection_target }}"

- block:
  - name: Extract kubeadm version from the backup tarball
    # Match kube_cmd_versions VALUES from sysinv database table.
    command: >-
        zgrep -aE '^INSERT INTO .*kube_cmd_versions VALUES'
        {{ initial_backup_dir }}/{{ backup_filename }}
    args:
      warn: false
    failed_when: false
    register: kube_cmd_search

  - name: Fail if kube_cmd_versions table is missing
    fail:
      msg: >
        Cannot find {{ initial_backup_dir }}/{{ backup_filename }}
        or the kube_cmd_versions table is missing in the backup tarball!
    when: kube_cmd_search.rc != 0

  - name: Set restore kubernetes version for bootstrap
    set_fact:
      # Note: regex_search() returns a list containing capture groups.
      # The first filter obtains the first grouped element and converts
      # unicode string to string.
      restore_k8s_version: "{{ kube_cmd_search.stdout_lines[0] \
                           | regex_search(version_re, '\\1') \
                           | first }}"
    failed_when: restore_k8s_version|length == 0
    vars:
      # kubeadm_version is second last entry within VALUES tuple containing
      # 6 CSV elements. Exclude the single quotes surrounding the version.
      version_re: 'VALUES\s+\([^,]+,[^,]+,[^,]+,[^,]+,\s+''([^\s]+)'',[^,]+\);'

  - debug:
      msg: "kubeadm version from kube_cmd_versions {{ restore_k8s_version }}"
  delegate_to: "{{ inspection_target }}"

- name: Wait for system to become reachable
  wait_for_connection:
    timeout: 10

- block:
  # Bail if the host has been unlocked
  - name: Check initial config flag
    stat:
      path: /etc/platform/.initial_config_complete
    register: initial_config_done

  - name: Fail if the host has been unlocked
    fail:
      msg: "Host {{ ansible_host }} has been unlocked. Cannot perform restore."
    when: initial_config_done.stat.exists

  - name: Set restore file parameter
    set_fact:
      restore_data_file: "{{ target_backup_dir }}/{{ backup_filename }}"

  - name: Stage backup tarballs
    include_role:
      name: backup-restore/stage-backup-archives

  - name: Extract override file from backup tarball
    command: >
      tar --use-compress-program=pigz -C {{ target_backup_dir }}
      -xf {{ target_backup_dir }}/{{ backup_filename }} --transform='s,.*/,,'
      {{ search_result.stdout_lines[0] }}
    register: extract_result
    failed_when: false
    args:
      warn: false

  - name: Fail if host override file cannot be extracted from the backup tar file
    fail:
      msg: >
        Failed to extract the host override file {{ search_result.stdout_lines[0] }}.
        If the backup tar file is not on the host that is being restored, please either
        transfer the tar file to the target or set on_box_data parameter to false and
        try again.
    when: extract_result.rc != 0

  - name: Prepare to rename override file
    set_fact:
      override_filename: restore_platform_overrides.yml

  - name: Rename override file for bootstrap
    command: >
      mv -f {{ target_backup_dir }}/{{ (search_result.stdout_lines[0] | basename) }}
      {{ target_backup_dir }}/{{ override_filename }}

  - name: Merge restore overrides
    block:
      - name: Read overrides from backup
        command:
          cmd: "cat {{ target_backup_dir }}/{{ override_filename }}"
        register: original_overrides

      - name: Merge new restore overrides
        set_fact:
          merged_overrides: >
            {{
              original_overrides.stdout
              | from_yaml
              | combine(restore_overrides, recursive=recursive)
              | to_nice_yaml
            }}
        vars:
          recursive: "{{ restore_overrides_recursive|bool }}"

      - name: Write merged restored overrides
        copy:
          content: "{{ merged_overrides }}"
          dest: "{{ target_backup_dir }}/{{ override_filename }}"

    when: restore_overrides

  - name: Load override data (local execution)
    include_vars: "{{ target_backup_dir }}/{{ override_filename }}"
    when: inventory_hostname == "localhost"
    no_log: true

  - block:
      - name: Create a temporary file
        tempfile:
          state: file
        register: host_override_tmp_file
        delegate_to: localhost
        become: no

      - name: Fetch override file to temp file to Ansible control host
        fetch:
          src: "{{ target_backup_dir }}/{{ override_filename }}"
          dest: "{{ host_override_tmp_file.path }}"
          flat: yes

      - name: Load override data (remote execution)
        include_vars: "{{ host_override_tmp_file.path }}"
        no_log: true

      - name: Remove override temp file on Ansible control host
        file:
          path: "{{ host_override_tmp_file.path }}"
          state: absent
        delegate_to: localhost
        become: no

    when: inventory_hostname != "localhost"

  - name: Create {{ restore_in_progress_flag }} flag file
    file:
      path: "{{ restore_in_progress_flag }}"
      state: touch

  become: yes
  become_user: root

- name: Save original docker_registries override value for later
  set_fact:
    original_overrides:
      docker_registries: "{{ docker_registries }}"
  no_log: true

- name: Perform additional validation that requires values from after restore is started
  import_role:
    name: backup-restore/validate-with-overrides

- name: Set archive parameters for bootstrap
  set_fact:
    archive_puppet_permdir: "opt/platform/puppet/{{ software_version }}/hieradata"
    archive_ssh_config_permdir: "opt/platform/config/{{ software_version }}/ssh_config"
    archive_config_permdir: "opt/platform/config/{{ software_version }}"
    archive_keyring_permdir: "opt/platform/.keyring/{{ software_version }}/python_keyring"
    archive_branding_permdir: "opt/platform/config/{{ software_version }}/branding"
    archive_banner_permdir: "opt/platform/config/{{ software_version }}/banner/etc"
    archive_deploy_permdir: "opt/platform/deploy/{{ software_version }}"
    archive_helm_permdir: "opt/platform/helm/{{ software_version }}"
  when: not upgrade_in_progress or (previous_software_version == "22.06")
