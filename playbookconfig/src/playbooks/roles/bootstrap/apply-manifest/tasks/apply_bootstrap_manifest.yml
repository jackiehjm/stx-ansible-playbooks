---
#
# Copyright (c) 2019 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# SUB-TASK DESCRIPTION:
# These tasks create static configuration and apply the puppet bootstrap
# manifest.

- name: Create config workdir
  file:
    path: "{{ hieradata_workdir }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- block:
  - name: Generating static config data
    command: "/usr/bin/sysinv-puppet create-static-config {{ hieradata_workdir }}"
    failed_when: false
    register: static_config_result

  - name: Fail if static hieradata cannot be generated
    fail:
      msg: "Failed to create puppet hiera static config."
    when: static_config_result.rc != 0

  - name: Write required system controller keystone user and project Ids to static hieradata if it's subcloud
    lineinfile:
      path: "{{ hieradata_workdir }}/static.yaml"
      line: "{{ item }}"
    with_items:
      - "keystone::dc_admin_user_id: {{ system_controller_keystone_admin_user_id }}"
      - "keystone::dc_admin_project_id: {{ system_controller_keystone_admin_project_id }}"
      - "openstack::keystone::bootstrap::dc_services_project_id: {{ system_controller_keystone_services_project_id }}"
      - "platform::sysinv::bootstrap::dc_sysinv_user_id: {{ system_controller_keystone_sysinv_user_id }}"
      - "platform::dcmanager::bootstrap::dc_dcmanager_user_id: {{system_controller_keystone_dcmanager_user_id}}"

    when: distributed_cloud_role == 'subcloud'

  - name: Create cert for etcd server and client
    import_role:
      name: common/create-etcd-certs
  when: mode == 'bootstrap'

- block:
  - name: Set ssh_config tmp dir fact
    set_fact:
      temp_ssh_config_dir: /tmp/config/ssh_config

  - name: Prefetch static and system hieradata
    command: >-
      tar -C {{ hieradata_workdir }} -xpf {{ restore_data_file }} --transform='s,.*/,,'
      '{{ archive_puppet_permdir }}/*static.yaml'
      '{{ archive_puppet_permdir }}/system.yaml'
    args:
      warn: false

  - name: Migrate static hieradata to new version
    command: >
      sed -i 's/{{ upgrade_metadata.from_release }}/{{ upgrade_metadata.to_release }}/g'
      {{ hieradata_workdir }}/static.yaml
    args:
      warn: false
    when: migrate_platform_data is defined and migrate_platform_data

  # The helmv2 database is new in the release stx5.0. The AIO-SX
  # upgrade from stx4.0 to stx5.0 requires a password to be generated
  # and written into hieradata to access the DB. This can be removed
  # in the release that follows stx5.0
  - block:
    - name: Generate helmv2 database password and store in keyring
      vars:
        script_content: |
          import keyring
          import os
          from sysinv.common import utils

          helmv2_db_pw = keyring.get_password("helmv2", "database")
          if helmv2_db_pw:
              print(helmv2_db_pw)
              exit()

          os.environ['XDG_DATA_HOME'] = '/tmp'
          try:
              helmv2_db_pw = utils.generate_random_password(length=16)
              keyring.set_password("helmv2", "database", helmv2_db_pw)
              print(helmv2_db_pw)
          except Exception as e:
              raise Exception("Failed to generate password for helmv2:%s" % e)
          finally:
              del os.environ['XDG_DATA_HOME']
      shell: "{{ script_content }}"
      args:
        executable: /usr/bin/python
      register: helmv2_db_pw_output
      no_log: true

    - name: Write helmv2 database username to hieradata
      lineinfile:
        path: "{{ hieradata_workdir }}/static.yaml"
        line: "platform::helm::v2::db::postgresql::user: admin-helmv2"

    - name: Write helmv2 database password to hieradata
      lineinfile:
        path: "{{ hieradata_workdir }}/secure_static.yaml"
        line: "platform::helm::v2::db::postgresql::password: {{ helmv2_db_pw_output.stdout }}"

    when: (migrate_platform_data is defined and
           migrate_platform_data and
           upgrade_metadata.from_release == "20.06")

  - name: Restore etcd certificates.
    shell: tar -C / --overwrite -xpf {{ restore_data_file }} {{ item }}
    args:
      warn: false
    with_items:
      - "{{ '/etc/etcd' | regex_replace('^\\/', '') }}"
    become_user: root

  - name: Check if etcd certs are exist.
    find:
      paths: "/etc/etcd"
      patterns:
        - '*.crt'
        - '*.key'
    register: etcd_certs_find_output

    # This is for simplex upgrade from STX 4.0 to 5.0
  - block:
    - name: set kubeadm_pki_dir
      set_fact:
        kubeadm_pki_dir: /etc/kubernetes/pki

    - name: Create pki directory for kubernetes certificates
      file:
        path: "{{ kubeadm_pki_dir }}"
        state: directory
        mode: 0700

    - name: Restore CA
      shell: tar -C / --overwrite -xpf {{ restore_data_file }} {{ item }}
      args:
        warn: false
      with_items:
        - "{{ kubeadm_pki_dir | regex_replace('^\\/', '') }}"
      become_user: root

    - name: Create certs for etcd server and client for simplex upgrade
      import_role:
        name: common/create-etcd-certs
    when: etcd_certs_find_output.matched == 0

  - name: Check if apiserver-keys are present in the backup tarball
    shell: "tar -tf {{ restore_data_file }} | grep 'etc/kubernetes/pki/apiserver-etcd-client.*'"
    args:
      warn: false
    failed_when: false
    register: apiserver_etcd_certs_find_output

  - name: Extract apiserver-keys from /etc/kubernetes/pki
    shell: tar -C /etc/etcd/ --overwrite -xpf {{ restore_data_file }} {{ item }} --strip-components 3
    args:
      warn: false
    with_items:
      - "{{ kubeadm_pki_dir | regex_replace('^\\/', '') }}/apiserver-etcd-client.crt"
      - "{{ kubeadm_pki_dir | regex_replace('^\\/', '') }}/apiserver-etcd-client.key"
    become_user: root
    when: apiserver_etcd_certs_find_output.rc == 0

  - name: Look for ssh_config dir in the backup tarball
    shell: "tar -tf {{ restore_data_file }} | grep 'opt/platform/config/.*/ssh_config'"
    args:
      warn: false
    failed_when: false
    register: search_ssh_config

  - block:
    - name: Create temp ssh_config dir
      file:
        path: "{{ temp_ssh_config_dir }}"
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: Prefetch ssh_config
      command: >-
        tar -C {{ temp_ssh_config_dir }} -xpf {{ restore_data_file }} --transform='s,.*/,,'
        {{ archive_ssh_config_permdir }}
      args:
        warn: false

    - name: Remove the unwanted directory
      file:
        path: "{{ temp_ssh_config_dir }}/ssh_config"
        state: absent

    when: search_ssh_config.rc == 0
  when: mode == 'restore'

- name: Set the ip version of etcd listen address to its default value
  set_fact:
    etcd_listen_address_version: 4

- name: Update the ip version of etcd listen address to ipv6
  set_fact:
    etcd_listen_address_version: 6
  when: ipv6_addressing != False

  # Add etcd security info to static hieradata so that etcd is configured with security
  # when etc puppet manifest is applied before Kubernetes master is initialized in the later role.
- name: Write security settings to static hieradata
  lineinfile:
    path: "{{ hieradata_workdir }}/static.yaml"
    line: "{{ item }}"
  with_items:
    - "platform::etcd::params::security_enabled: true"
    - "platform::etcd::params::bind_address: {{ cluster_floating_address }}"
    - "platform::etcd::params::bind_address_version: {{ etcd_listen_address_version }}"

- name: Create runtime hieradata
  file:
    path: "{{ hieradata_workdir }}/runtime.yaml"
    state: touch
    owner: root
    group: root
    mode: 0600

- block:
  - name: Specify filesystem sizes
    set_fact:
      pgsql_size: 10
      platform_size: 10
      etcd_size: 5
      dockerdistribution_size: 16
      backup_size: 20
      docker_size: 30
      kubelet_size: 10
      scratch_size: 16
    when: root_disk_size|int >= minimum_small_root_disk_size

  - name: Expand filesystem sizes
    set_fact:
      pgsql_size: 20
      backup_size: 25
    when: root_disk_size|int > small_root_disk_size

  - name: Write filesystem settings to runtime hieradata
    lineinfile:
      path: "{{ hieradata_workdir }}/runtime.yaml"
      line: "{{ item }}"
    with_items:
      - "platform::filesystem::backup::params::lv_size: {{ backup_size }}"
      - "platform::filesystem::docker::params::bootstrap::lv_size: {{ docker_size }}"
      - "platform::filesystem::kubelet::params::lv_size: {{ kubelet_size }}"
      - "platform::filesystem::scratch::params::lv_size: {{ scratch_size }}"
      - "platform::drbd::dockerdistribution::params::lv_size: {{ dockerdistribution_size }}"
      - "platform::drbd::etcd::params::lv_size: {{ etcd_size }}"
      - "platform::drbd::pgsql::params::lv_size: {{ pgsql_size }}"
      - "platform::drbd::platform::params::lv_size: {{ platform_size }}"
    when: root_disk_size|int >= minimum_small_root_disk_size
  when: mode == 'bootstrap'

- block:
  - name: Read drbd settings from system hieradata
    command: "grep 'platform::drbd::.*::params::lv_size.*' {{ hieradata_workdir }}/system.yaml"
    register: system_file

  - name: Write filesystem settings to runtime hieradata
    lineinfile:
      path: "{{ hieradata_workdir }}/runtime.yaml"
      line: "{{ item }}"
    with_items: "{{system_file.stdout_lines}}"

  - name: Remove system hieradata
    file:
      path: "{{ hieradata_workdir }}/system.yaml"
      state: absent

  when: mode == 'restore'

- name: Applying puppet bootstrap manifest
  command: >
    /usr/local/bin/puppet-manifest-apply.sh
    {{ hieradata_workdir }}
    {{ derived_network_params.controller_0_address }}
    controller ansible_bootstrap
    {{ hieradata_workdir }}/runtime.yaml > {{ manifest_apply_log }}
  register: bootstrap_manifest
  environment:
    INITIAL_CONFIG_PRIMARY: "true"
    LC_ALL: "en_US.UTF-8"
  failed_when: false

- name: Fail if puppet manifest apply script returns an error
  fail:
    msg: >-
         Failed to apply bootstrap manifest. Please re-install host {{ansible_host}}
         before attempting to bootstrap it again. See /var/log/puppet/latest/puppet.log
         for details.
  when: bootstrap_manifest.rc != 0

- name: Remove runtime hieradata
  file:
    path: "{{ hieradata_workdir }}/runtime.yaml"
    state: absent

- name: Ensure Puppet directory exists
  file:
    path: "{{ puppet_permdir }}"
    state: directory
    recurse: yes
    owner: root
    group: root
    mode: 0755

- name: Persist puppet working files
  command: "mv {{ hieradata_workdir }} {{ puppet_permdir }}"
