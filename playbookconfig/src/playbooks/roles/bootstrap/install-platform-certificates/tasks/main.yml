---
#
# Copyright (c) 2022-2023 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# These tasks get information from the running system and use it to
# generate a certificate spec file which is going to be applied to
# kubernetes at a later step
#
- block:
  - name: Get distributed_cloud_role if not defined
    shell: |
      source /etc/platform/openrc
      system show | grep distributed_cloud_role | awk '{ print $4 }'
    register: dc_role

  - name: Set distributed_cloud_role value
    set_fact:
      distributed_cloud_role: "{{ dc_role.stdout }}"

  when: distributed_cloud_role is undefined

# For subclouds, in normal restore the ca cert must be restored from backup,
# so we are only recreating it in upgrades.
- name: Define whether 'system-local-ca' secret should be created in the subcloud
  set_fact:
    subcloud_local_ca_should_be_altered: >-
      "{{ mode == 'bootstrap' or upgrade_in_progress }}"
  when: distributed_cloud_role == 'subcloud'

# TODO (mdecastr): Clear the code moved to this task once the feature is done
- name: Retrieve local CA data
  include_tasks: retrieve-system-local-ca-data.yml
  when:
    - create_platform_certificates
    - distributed_cloud_role != 'subcloud' or subcloud_local_ca_should_be_altered

# If subcloud or in upgrades, retrieve data from 'system-local-ca' if it exists
- block:
  - name: Check if 'system-local-ca' secret exists
    shell: |
      kubectl get secret system-local-ca -n cert-manager \
      --ignore-not-found=true --no-headers=true | \
      awk '{ if ($0 != "") print "true"; exit}'
    environment:
      KUBECONFIG: "/etc/kubernetes/admin.conf"
    register: system_local_ca_exists

  - block:
    - name: Retrieve system local CA cert from k8s secret (on System Controller)
      command: kubectl get secret system-local-ca -n cert-manager -o jsonpath='{.data.tls\.crt}'
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"
      register: cert_result

    - name: Retrieve system local CA key from k8s secret (on System Controller)
      command: kubectl get secret system-local-ca -n cert-manager -o jsonpath='{.data.tls\.key}'
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"
      register: key_result

    - name: Set system-local-ca data
      set_fact:
        system_root_ca_cert: "{{ cert_result.stdout }}"
        system_local_ca_cert: "{{ cert_result.stdout }}"
        system_local_ca_key: "{{ key_result.stdout }}"
        system_local_ca_data_obtained: true

    when: system_local_ca_exists.stdout | bool

  when:
    - distributed_cloud_role == 'subcloud' or upgrade_in_progress
    - not system_local_ca_data_obtained
  connection: local

# Else retrieve from kubernetes root CA
- block:
  - name: Read kubernetes Root CA certificate
    shell: cat "{{ kubeadm_pki_dir }}/ca.crt" | base64 -w0
    register: kubernetes_root_ca_crt
    become: true

  - name: Read kubernetes Root CA key
    shell: cat "{{ kubeadm_pki_dir }}/ca.key" | base64 -w0
    register: kubernetes_root_ca_key
    become: true

  - name: Set system-local-ca data based on kubernetes Root CA
    set_fact:
      system_root_ca_cert: "{{ kubernetes_root_ca_crt.stdout }}"
      system_local_ca_cert: "{{ kubernetes_root_ca_crt.stdout }}"
      system_local_ca_key: "{{ kubernetes_root_ca_key.stdout }}"

  connection: local
  when: not system_local_ca_data_obtained

- block:
  # We only create the openldap cert for non-subcloud systems and avoid recreate it
  - name: Set creation of the openldap certificate
    block:
    - name: Check if openldap certificate already exists
      shell: |
        kubectl get secret system-openldap-local-certificate -n deployment \
        --ignore-not-found=true --no-headers=true | \
        awk '{ if ($0 != "") print "true"; exit}'
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"
      register: openldap_cert_exists

    - name: Register if openldap certificate should be created
      set_fact:
        install_system_open_ldap_certificate: "{{ not (openldap_cert_exists.stdout | bool) }}"

    when:
      - distributed_cloud_role != 'subcloud'
      - not create_platform_certificates

  # TODO (mdecastr): Clear the code moved to this task once the feature is done
  - name: Define the platform certificates that should be created by the local issuer
    include_tasks: define-certs-to-create.yml
    when: create_platform_certificates

  - name: Generate kubernetes yaml for cert-manager resources
    include_role:
      name: common/generate-platform-certificates-template
    vars:
      destination: "{{ cert_manager_spec_file }}"

  # We don't support auto renewals for this certificate
  - name: Delete old 'system-local-ca' certificate if it exists
    include_role:
      name: common/delete-kubernetes-resources
    with_items:
      - { name: system-local-ca, namespace: cert-manager, type: certificate }
    when: create_platform_certificates

  - name: Delete old 'system-local-ca' secret
    include_role:
      name: common/delete-kubernetes-resources
    with_items:
      - { name: system-local-ca, namespace: cert-manager, type: secret }

  - name: Apply kubernetes yaml to create cert-manager resources
    command: kubectl apply -f "{{ cert_manager_spec_file }}"
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    register: create_k8_apply_ep
    until: create_k8_apply_ep is not failed
    retries: 10
    delay: 30

  - name: Delete kubernetes yaml with certificate spec
    file:
      path: "{{ cert_manager_spec_file }}"
      state: absent
    become: yes

  - name: Install platform certificate for HTTPS
    include_tasks: install-https-certificate.yml
    when: create_platform_certificates

  when: distributed_cloud_role != 'subcloud' or subcloud_local_ca_should_be_altered
