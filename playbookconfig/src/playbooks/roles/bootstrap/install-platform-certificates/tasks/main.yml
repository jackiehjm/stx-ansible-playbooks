---
#
# Copyright (c) 2022-2023 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# These tasks get information from the running system and use it to
# generate a certificate spec file which is going to be applied to
# kubernetes at a later step
#
- block:
  - name: Get distributed_cloud_role if not defined
    shell: |
      source /etc/platform/openrc
      system show | grep distributed_cloud_role | awk '{ print $4 }'
    register: dc_role

  - name: Set distributed_cloud_role value
    set_fact:
      distributed_cloud_role: "{{ dc_role.stdout }}"

  when: distributed_cloud_role is undefined

# In upgrades, retrieve data from 'system-local-ca' if it exists
- block:
  - name: Check if 'system-local-ca' secret exists
    shell: |
      kubectl get secret system-local-ca -n cert-manager \
      --ignore-not-found=true --no-headers=true | \
      awk '{ if ($0 != "") print "true"; exit}'
    environment:
      KUBECONFIG: "/etc/kubernetes/admin.conf"
    register: system_local_ca_exists

  - block:
    - name: Retrieve system local CA cert from k8s secret (on System Controller)
      command: kubectl get secret system-local-ca -n cert-manager -o jsonpath='{.data.tls\.crt}'
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"
      register: cert_result

    - name: Retrieve system local CA key from k8s secret (on System Controller)
      command: kubectl get secret system-local-ca -n cert-manager -o jsonpath='{.data.tls\.key}'
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"
      register: key_result

    - name: Set local CA cert/key
      set_fact:
        system_root_ca_cert: "{{ cert_result.stdout }}"
        system_local_ca_cert: "{{ cert_result.stdout }}"
        system_local_ca_key: "{{ key_result.stdout }}"
        ca_data_obtained: true

    when: system_local_ca_exists.stdout | bool

  when: upgrade_in_progress
  connection: local

# Else retrieve from kubernetes root CA
- block:
  - name: Read kubernetes Root CA certificate
    shell: cat "{{ kubeadm_pki_dir }}/ca.crt" | base64 -w0
    register: kubernetes_root_ca_crt
    become: true

  - name: Read kubernetes Root CA key
    shell: cat "{{ kubeadm_pki_dir }}/ca.key" | base64 -w0
    register: kubernetes_root_ca_key
    become: true

  - name: Set Root CA and local CA based on kubernetes Root CA
    set_fact:
      system_root_ca_cert: "{{ kubernetes_root_ca_crt.stdout }}"
      system_local_ca_cert: "{{ kubernetes_root_ca_crt.stdout }}"
      system_local_ca_key: "{{ kubernetes_root_ca_key.stdout }}"

  connection: local
  when: ca_data_obtained is not defined

# If subcloud, we need to know the secret type. Also in restore mode the ca
# cert must be restored from backup, so we are only changing it otherwise.
- block:
  - name: Get 'system-local-ca' secret type for subcloud
    shell: |
      kubectl get secret system-local-ca -n cert-manager \
      --ignore-not-found=true --no-headers=true | \
      awk '{print $2}'
    environment:
      KUBECONFIG: "/etc/kubernetes/admin.conf"
    register: subcloud_local_ca_secret_type

  - name: Set subcloud_local_ca_secret_type value
    set_fact:
      subcloud_local_ca_secret_type: "{{ subcloud_local_ca_secret_type.stdout | lower }}"
      subcloud_local_ca_should_be_altered: "{{ (mode == 'bootstrap') or upgrade_in_progress }}"

  when: distributed_cloud_role == 'subcloud'

- block:
  - name: Initialize platform certificates to not be altered
    set_fact:
      install_oidc_auth_apps_certificate: false
      install_system_open_ldap_certificate: false
      install_system_registry_local_certificate: false
      install_system_restapi_gui_certificate: false

  # In non subcloud systems, we may need to create the openldap secret
  - name: Check if openldap certificate already exists
    shell: |
      kubectl get secret system-openldap-local-certificate -n deployment \
      --ignore-not-found=true --no-headers=true | \
      awk '{ if ($0 != "") print "true"; exit}'
    environment:
      KUBECONFIG: "/etc/kubernetes/admin.conf"
    register: openldap_cert_exists

  - name: Register if openldap certificate should be created
    set_fact:
      install_system_open_ldap_certificate: "{{ not (openldap_cert_exists.stdout | bool) }}"
    when: distributed_cloud_role != 'subcloud'

  - name: Generate kubernetes yaml for cert-manager resources
    include_role:
      name: common/generate-platform-certificates-template
    vars:
      destination: /tmp/platform_certificates.yaml

  - name: Apply kubernetes yaml to create cert-manager clusterissuer and certificates
    command: kubectl apply -f /tmp/platform_certificates.yaml
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    register: create_k8_apply_ep
    until: create_k8_apply_ep is not failed
    retries: 10
    delay: 30

  when: distributed_cloud_role != 'subcloud' or
        (subcloud_local_ca_should_be_altered and
        subcloud_local_ca_secret_type == 'kubernetes.io/tls')

# If the subcloud's secret is not tls (opaque or doesn't exist yet)
# we send the systemcontroller's. Else, we do nothing.
- name: Send root CA certificate to subcloud
  include_role:
    name: common/send-ca-cert-to-subcloud
  when: distributed_cloud_role == 'subcloud' and
        subcloud_local_ca_should_be_altered and
        subcloud_local_ca_secret_type != 'kubernetes.io/tls'
