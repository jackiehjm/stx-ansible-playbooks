---
#
# Copyright (c) 2020 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# SUB-TASKS DESCRIPTION:
#   Validate application
#

# example expected application yaml snip
#
#   /home/sysadmin/apps/nginx-ingress-controller-1.0-0.tgz:
#     overrides:
#       - chart: nginx
#         values-path: /home/sysadmin/nginx-overrides.yaml

- name: Fail if application yaml is malformed
  fail:
    msg: "Malformed application yaml: {{ application }}"
  when: application | length != 1

# application is specified by full path or the tar file
# extract the name of the tar file
- name: Set application tar name
  set_fact:
    current_application_tar_name: "{{ (application.keys()|list|first).split('/')[-1] }}"

- name: Fail if the application tarfile is not a valid type
  fail:
    msg: "File {{ current_application_tar_name }} has unrecognizable tarfile extension."
  when: current_application_tar_name is not regex(".*.tgz")

- name: Check appication tarfile status
  stat:
    path: "{{ application.keys()|list|first }}"
  register: tarball_stat

- name: Fail if the application tarfile doesn't exist
  fail:
    msg: "{{ application.keys()|list|first }} doesn't exist"
  when: not tarball_stat.stat.exists

- name: Fail if the provided application tarfile is a directory
  fail:
    msg: "{{ application.keys()|list|first }} is a directory"
  when: tarball_stat.stat.exists and tarball_stat.stat.isdir

- name: Fail if overrides config is incomplete
  debug:
    msg: "checking override: {{ override_item }}"
  failed_when: '"chart" not in override_item or
                "namespace" not in override_item or
                "values-path" not in override_item'
  loop: "{{ application[application.keys()|list|first]['overrides'] }}"
  loop_control:
    loop_var: override_item
  when: (application[application.keys()|list|first]) and
        ("overrides" in application[application.keys()|list|first])

- name: Fail if overrides file does not exist
  stat:
    path: "{{ override_item['values-path'] }}"
  register: override_stat
  failed_when: not override_stat.stat.exists
  loop: "{{ application[application.keys()|list|first]['overrides'] }}"
  loop_control:
    loop_var: override_item
  when: (application[application.keys()|list|first]) and
        ("overrides" in application[application.keys()|list|first])
