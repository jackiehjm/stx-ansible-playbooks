---
#
# Copyright (c) 2019 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# SUB-TASKS DESCRIPTION:
#   These tasks do the preparation specifically for the platform restore
#
- block:
  - name: Set config path facts for restore
    set_fact:
      branding_permdir: "{{ config_permdir }}/branding"
      banner_permdir: "{{ config_permdir }}/banner/etc"
      ssh_config_permdir: "{{ config_permdir }}/ssh_config"
      pxe_config_permdir: "{{ config_permdir }}/pxelinux.cfg"
      armada_permdir: "{{ platform_path }}/armada/"
      helm_overrides_permdir: "{{ platform_path + '/helm/' + software_version }}"
      sysinv_config_permdir: "{{ platform_path + '/sysinv/' + software_version }}"

  - name: Restore branding tar file
    command: >-
      tar -C /opt/branding -xpf {{ restore_data_file }} --transform='s,.*/,,'
      {{ archive_branding_permdir }}
    args:
      warn: false

  - name: Remove unwanted directory
    file:
      path: /opt/branding/branding
      state: absent

  - name: Look for banner directory in the backup tarball
    shell: "tar -tf {{ restore_data_file }} | grep -F 'banner/etc'"
    args:
      warn: false
    failed_when: false
    register: banner_result

  - block:
    - name: Create banner directory
      file:
        path: /opt/banner
        state: directory

    - name: Restore banner files if they exist in the backup tarball
      command: >-
        tar -C /opt/banner -xpf {{ restore_data_file }} --transform='s,.*/,,'
        {{ archive_banner_permdir }}
      args:
        warn: false

    - name: Remove unwanted directory
      file:
        path: /opt/banner/etc
        state: absent
    when: banner_result.rc == 0

  - name: Extract ssl_ca certifcate from backup archive
    command: >-
      tar -xf {{ restore_data_file }} -C {{ temp_ssl_ca_dir }} -p --transform='s,.*/,,'
      */{{ temp_ssl_ca_file }}*
    args:
      warn: false
    failed_when: false

  - name: Check that ssl_ca certificate exists
    stat:
      path: "{{ temp_ssl_ca_dir }}/{{ temp_ssl_ca_file }}"
    register: ca_from_bk

  - name: Set ssl_ca_cert if exists
    set_fact:
      ssl_ca_cert: "{{ temp_ssl_ca_dir }}/{{ temp_ssl_ca_file }}"
    when: ca_from_bk.stat.exists == True

  - name: Extract enabled kubernetes plugin configuration from the backup archive
    command: >-
      tar -C {{ temp_k8s_plugins_dir }} -xpf {{ restore_data_file }}
      --overwrite --transform='s,.*/,,' '{{ archive_config_permdir }}/enabled_kube_plugins'
    args:
      warn: false
    failed_when: false

  - name: Check that enabled_kube_plugins exists
    stat:
      path: "{{ temp_k8s_plugins_dir }}/enabled_kube_plugins"
    register: plugins_from_bk

  - name: set fact k8s_plugins
    include_vars:
      file: '{{ temp_k8s_plugins_dir }}/enabled_kube_plugins'
      name: k8s_plugins
    when: plugins_from_bk.stat.exists == True


  become: yes
  become_user: root
