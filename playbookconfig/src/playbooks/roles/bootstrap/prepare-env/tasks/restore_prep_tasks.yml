---
#
# Copyright (c) 2019-2022 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# SUB-TASKS DESCRIPTION:
#   These tasks do the preparation specifically for the platform restore
#
- block:
  - name: Set config path facts for restore
    set_fact:
      branding_permdir: "{{ config_permdir }}/branding"
      banner_permdir: "{{ config_permdir }}/banner/etc"
      ssh_config_permdir: "{{ config_permdir }}/ssh_config"
      pxe_config_permdir: "{{ config_permdir }}/pxelinux.cfg"
      armada_permdir: "{{ platform_path }}/armada/"
      fluxcd_permdir: "{{ platform_path }}/fluxcd/"
      helm_overrides_permdir: "{{ platform_path + '/helm/' + software_version }}"
      sysinv_config_permdir: "{{ platform_path + '/sysinv/' + software_version }}"

  - name: Check if branding folder is present in the backup tarball
    shell: "tar -tf {{ restore_data_file }} | grep '{{ archive_branding_permdir }}'"
    args:
      warn: false
    failed_when: false
    register: bkp_has_branding

  # Restore branding error can be ignored for now as /opt is under ostree read-only
  # permission, this will fixed on another task tracked under the same storyboard
  - name: Restore branding tar file
    command: >-
      tar -C /opt/branding -xpf {{ restore_data_file }} --transform='s,.*/,,'
      {{ archive_branding_permdir }}
    args:
      warn: false
    when: bkp_has_branding.rc is defined and
        bkp_has_branding.rc == 0
    failed_when: false

  - name: Remove unwanted directory
    file:
      path: /opt/branding/branding
      state: absent

  - name: Look for banner directory in the backup tarball
    shell: "tar -tf {{ restore_data_file }} | grep -F 'banner/etc'"
    args:
      warn: false
    failed_when: false
    register: banner_result

  - block:
    - name: Create banner directory
      file:
        path: /opt/banner
        state: directory

    - name: Restore banner files if they exist in the backup tarball
      command: >-
        tar -C /opt/banner -xpf {{ restore_data_file }} --transform='s,.*/,,'
        {{ archive_banner_permdir }}
      args:
        warn: false

    - name: Remove unwanted directory
      file:
        path: /opt/banner/etc
        state: absent
    when: banner_result.rc == 0

  - name: Delete {{ temp_ssl_ca_dir }}/{{ temp_ssl_ca_file }}
    file:
      path: "{{ temp_ssl_ca_dir }}/{{ temp_ssl_ca_file }}"
      state: absent

  - block:
    - name: When target is on-box, transfer ssl_ca certificate file to
            {{ temp_ssl_ca_dir }}/{{ temp_ssl_ca_file }} if defined in command line
      copy:
        src: "{{ ssl_ca_certificate_file }}"
        dest: "{{ temp_ssl_ca_dir }}/{{ temp_ssl_ca_file }}"
        remote_src: yes
      when: (on_box_data is not defined) or (on_box_data|bool == true)

    - name: When target is off-box, transfer ssl_ca certificate file to
            {{ temp_ssl_ca_dir }}/{{ temp_ssl_ca_file }} if defined in command line
      copy:
        src: "{{ ssl_ca_certificate_file }}"
        dest: "{{ temp_ssl_ca_dir }}/{{ temp_ssl_ca_file }}"
      when: (on_box_data is defined) and (on_box_data|bool == false)

    when: ssl_ca_certificate_file is defined and ssl_ca_certificate_file is not none

  - name: Extract ssl_ca certificate from backup archive
    command: >-
      tar -xvf '{{ restore_data_file }}'
      -C '{{ temp_ssl_ca_dir }}'
      -p --transform='s,.*/,,'
      '{{ archive_config_permdir }}/{{ temp_ssl_ca_file }}'
    args:
      warn: false
    failed_when: false
    when: ssl_ca_certificate_file is not defined or ssl_ca_certificate_file is none

  - name: Check that ssl_ca certificate exists
    stat:
      path: "{{ temp_ssl_ca_dir }}/{{ temp_ssl_ca_file }}"
    register: ca_from_bk

  - name: Set ssl_ca_cert if exists
    set_fact:
      ssl_ca_cert: "{{ temp_ssl_ca_dir }}/{{ temp_ssl_ca_file }}"
    when: ca_from_bk.stat.exists == True

  - name: Extract enabled kubernetes plugin configuration from the backup archive
    command: >-
      tar -C {{ temp_k8s_plugins_dir }} -xpf {{ restore_data_file }}
      --overwrite --transform='s,.*/,,' '{{ archive_config_permdir }}/enabled_kube_plugins'
    args:
      warn: false
    failed_when: false

  - name: Check that enabled_kube_plugins exists
    stat:
      path: "{{ temp_k8s_plugins_dir }}/enabled_kube_plugins"
    register: plugins_from_bk

  - name: set fact k8s_plugins
    include_vars:
      file: '{{ temp_k8s_plugins_dir }}/enabled_kube_plugins'
      name: k8s_plugins
    when: plugins_from_bk.stat.exists == True

  - name: Register the content of etc/hostname from backup archive
    shell: tar -O -xf {{ restore_data_file }} etc/hostname
    register: bck_taken_from

  - name: Set the host from where the backup was taken
    set_fact:
      backup_taken_from: "{{ bck_taken_from.stdout_lines[0] | trim | default('') }}"

  become: yes
  become_user: root
