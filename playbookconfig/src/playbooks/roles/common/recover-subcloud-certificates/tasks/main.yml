---
#
# Copyright (c) 2023 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# ROLE DESCRIPTION:
#   This role performs certificate recovery for subclouds when offline for
#   a long period of time
#

- name: Get system mode
  shell: source /etc/platform/platform.conf; echo $system_mode
  register: system_mode_result

- name: Get node type
  shell: source /etc/platform/platform.conf; echo $nodetype
  register: node_type_result

- name: Get software version
  shell: source /etc/platform/platform.conf; echo $sw_version
  register: sw_version_result

- set_fact:
    is_controller: "{{ true if node_type_result.stdout == 'controller' else false }}"

- set_fact:
    is_compute: "{{ true if node_type_result.stdout == 'worker' else false }}"

- name: Check if current controller is the active controller
  block:
  - name: Check if admin credentials can be sourced
    shell: source /etc/platform/openrc
    failed_when: false
    register: active_controller

  - set_fact:
      is_active_controller: >-
        {{ true if 'stdout' in active_controller and active_controller.stdout
        | length == 0 else false }}

  when: is_controller

- name: Verify certificate expiration status
  import_tasks: verify-certificate-expiration-status.yml
  when: is_active_controller

- block:
  - name: Recover K8s Root CA certificates (K8s Root CA, ETCD CA, FrontProxy CA)
    import_tasks: recover-k8s-root-cas.yml

  - name: Renew K8s leaf certificates
    import_tasks: recover-k8s-leaf-certificates.yml

  - block:
    - name: Recover dc admin endpoint Root CA, subcloud ICA and leaf certificates
      import_tasks: recover-dc-admin-ep-certificate-chain.yml

    - name: Validate rest-api / docker registry certificates
      import_tasks: validate-restapi-and-registry-certificates.yml

    when: is_active_controller

  - name: Do certificate recovery on other nodes when system type is multi-node
    block:
      - name: Lock standby controller
        shell: source /etc/platform/openrc; system host-lock controller-1 --force
        register: host_lock_output
        failed_when: >-
         host_lock_output.stderr != "Avoiding lock action on already 'locked' host controller-1"
         and host_lock_output.rc != 0

      - name: Get worker nodes
        shell: >-
         source /etc/platform/openrc; system host-list --format value
         | grep worker | awk '{ print$2 }'
        register: worker_nodes_results
        until: worker_nodes_results is not failed

      # The active controller on the subcloud will target other nodes and do certificate recovery
      - block:
        - name: Do certificate recovery on other nodes
          command: >
            ansible-playbook
            /usr/share/ansible/stx-ansible/playbooks/recover_subcloud_certificates_other_nodes.yml
            -e "hosts={{ worker_nodes_results.stdout }} ansible_ssh_user={{ ansible_ssh_user }}
            ansible_ssh_pass={{ ansible_ssh_pass }} ansible_become_pass={{ ansible_become_pass }}
            certificate_recovery_necessary={{ certificate_recovery_necessary }}" -v
          register: other_nodes_recovery_output
          no_log: true

        always:
          - name: Print the output of platform certificate recovery playbook
            debug:
              msg: "{{ other_nodes_recovery_output.stdout }}"

      - name: Unlock standby controller
        shell: source /etc/platform/openrc; system host-unlock controller-1

      - name: Wait until controller-1 reboots after host-unlock
        shell: source /etc/platform/openrc; system host-list --format value | grep controller-1
        register: host_list_var
        retries: 40
        delay: 15
        until: >-
         'controller-1 controller unlocked enabled' in host_list_var.stdout
         and 'offline' not in host_list_var.stdout

    when:
      - system_mode_result.stdout == 'duplex'
      - is_active_controller

  - name: Restart cert-mon and cert-alarm to clear up certificate related alarms
    shell: echo "cert-mon cert-alarm" | xargs -n1 sm-restart service
    become: yes

  - name: Wait until management affecting alarms clear up
    shell: source /etc/platform/openrc; fm alarm-list --mgmt_affecting | grep -c True
    register: mgmt_affecting_present
    failed_when: |
      mgmt_affecting_present.stdout | int != 0 or mgmt_affecting_present.stderr | length > 0
    # Up to 10 mins to have some buffer, but usually takes ~ 3 mins.
    retries: 30
    delay: 20
    until:
      - mgmt_affecting_present.stdout | int == 0
      - mgmt_affecting_present.stderr | length == 0
    when: is_active_controller

  - name: Mark certificate recovery as complete
    block:
      - name: Delete {{ certificate_recovery_in_progress_flag }}
        file:
          path: "{{ certificate_recovery_in_progress_flag }}"
          state: absent

      - set_fact:
          certificate_recovery_complete: true

  when: certificate_recovery_necessary

  always:
    - name: Delete root ca key file after use in compute nodes
      file:
        path: /etc/kubernetes/pki/ca.key
        state: absent
      become: yes
      when: is_compute
