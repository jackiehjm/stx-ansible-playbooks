---
#
# Copyright (c) 2019-2022 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# ROLE DESCRIPTION:
#   This role is to perform tasks that are common to the playbooks.
#

# Check for Host OS release
- name: Gather Host OS release
  raw: "grep '^NAME=' /etc/os-release | sed s'/NAME=//'"
  register: distro
  changed_when: false

- name: Set OS Release to Debian
  set_fact:
    os_release: "debian"
  when: "'Debian' in distro.stdout"

- name: Set OS Release to Centos
  set_fact:
    os_release: "centos"
  when: "'Debian' not in distro.stdout"

# Include user override files for a play
- stat:
    path: "{{ item }}"
  register: files_to_import
  with_items:
    - "{{ override_files_dir }}/secrets.yml"
    - "{{ override_files_dir }}/{{ inventory_hostname }}_secrets.yml"
    - "{{ override_files_dir }}/site.yml"
    - "{{ override_files_dir }}/{{ inventory_hostname }}.yml"
  delegate_to: localhost

- include_vars: "{{ item.item }}"
  when: item.stat.exists
  with_items: "{{ files_to_import.results }}"

# Check host connectivity, change password if provided
- block:
  - name: Set SSH port
    set_fact:
      ansible_port: "{{ ansible_port | default(22) }}"

  - name: Format the ansible host if it is an IP address
    set_fact:
      ansible_host: "{{ ansible_host | ipaddr }}"
    when: ansible_host | ipaddr

  - name: Set SSH hostname
    set_fact:
      ssh_hostname: "{{ ansible_host }}"

  - name: Set SSH hostname if SSH port is not default
    set_fact:
      ssh_hostname: "[{{ ansible_host }}]:{{ ansible_port }}"
    when: ansible_port != '22'

  - name: Check connectivity
    local_action: command ping -c 1 {{ ansible_host }}
    failed_when: false
    register: ping_result

  - name: Fail if host is unreachable
    fail: msg='Host {{ ansible_host }} is unreachable!'
    with_items:
      - "{{ ping_result.stdout_lines|list }}"
    when: ping_result.rc != 0 and item is search('100% packet loss')

  - name: Gather remote SSH public key
    command: ssh-keyscan -T 20 -t ecdsa {{ ssh_hostname }}
    register: remote_keyscan
    until: remote_keyscan.stdout != ""
    retries: 6
    delay: "{{ 3 | random }}"
    delegate_to: localhost

  - name: Print warning if ssh-keyscan command is timed out
    debug:
      msg: "ssh-keyscan command is timed out."
    when: remote_keyscan.stdout == ""

  - name: Add remote SSH public keys into the known_hosts
    lineinfile:
      path: "~/.ssh/known_hosts"
      create: yes
      line: "{{ item }}"
    with_items: "{{ remote_keyscan.stdout_lines | list }}"
    register: add_sshkey
    until: not add_sshkey.changed
    retries: 6
    delay: "{{ 3 | random }}"
    delegate_to: localhost

  - block:
    - name: Fail if password change response sequence is not defined
      fail: msg="The mandatory parameter password_change_response is not defined."
      when: (vault_password_change_responses is not defined) and
            (password_change_responses is not defined)

    - block:
      - debug:
          msg: "Changing the initial password.."

      - name: Change initial password
        expect:
          echo: yes
          command: "ssh -p {{ ansible_port }} {{ ansible_ssh_user }}@{{ ansible_host }}"
          responses: "{{ vault_password_change_responses | default(password_change_responses) }}"
          timeout: 150
        register: passwd_change
        failed_when: "passwd_change.rc != 0 and 'successfully' not in passwd_change.stdout"
        delegate_to: localhost

      rescue:
        # Password change timed out. We are not going to fail it here.
        # It should be allowed for instance when initial password has been
        # changed and the user forgot to exclude password_change option
        # in the command line for the replay.
        - debug:
            msg: "Timed out or the password has already been changed"

    when: password_change

  when: inventory_hostname != 'localhost'
