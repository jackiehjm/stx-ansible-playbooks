---
#
# Copyright (c) 2019-2021 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# ROLE DESCRIPTION:
#   This role is to perform tasks that download container images
#   from public/private registries and push to local registry.
#

- name: Set default values for docker_http_proxy and docker_https_proxy if they are undefined
  set_fact:
    docker_http_proxy: "{{ docker_http_proxy|default('') }}"
    docker_https_proxy: "{{ docker_https_proxy|default('') }}"

- name: Get docker registries if not in bootstap or restore mode
  include: get_docker_registry.yml registry={{ item }}
  with_items:
    - { name: 'k8s_registry', value: { url: 'k8s.gcr.io' } }
    - { name: 'gcr_registry', value: { url: 'gcr.io' } }
    - { name: 'quay_registry', value: { url: 'quay.io' } }
    - { name: 'docker_registry', value: { url: 'docker.io' } }
    - { name: 'elastic_registry', value: { url: 'docker.elastic.co' } }
    - { name: 'ghcr_registry', value: { url: 'ghcr.io' } }
  when: mode is regex("^upgrade_") or
        mode == 'trident_install'


# Disable the log to not expose registry password
- name: Get registry credentials if registry type is AWS ECR
  include: get_aws_ecr_credentials.yml registry={{ item }}
  with_items:
    - { name: "k8s_registry", value: "{{ k8s_registry }}" }
    - { name: "gcr_registry", value: "{{ gcr_registry }}" }
    - { name: "quay_registry", value: "{{ quay_registry }}" }
    - { name: "docker_registry", value: "{{ docker_registry }}" }
    - { name: "elastic_registry", value: "{{ elastic_registry }}" }
    - { name: "ghcr_registry", value: "{{ ghcr_registry }}" }
  when: registry.value.type is defined and
        registry.value.type == 'aws-ecr'
  no_log: true

- name: Get platform images information
  import_role:
    name: common/load-images-information

# Download all system images and additional images if bootstrap or restore
- name: Set download images list
  set_fact:
    download_images_list:
      "{{ (kubernetes_images + networking_images + static_images + storage_images + security_images +
           additional_local_registry_images)
      if (additional_local_registry_images is defined and additional_local_registry_images|length > 0)
      else (kubernetes_images + networking_images + static_images + storage_images + security_images) }}"
  when: mode == 'bootstrap' or
        mode == 'restore'

# Download general and security specific static images if static images upgrade
- name: Set download images list to static images (both general and security specific) if upgrading platform
  set_fact:
    download_images_list: "{{ download_images_list|default([]) + static_images + security_images }}"
  when: mode == 'upgrade_static_images'

# Only download k8s networking images if k8s networking upgrade
- name: Set download images list to k8s network images if upgrading k8s networking
  set_fact:
    download_images_list: "{{ download_images_list|default([]) + networking_images }}"
  when: mode == 'upgrade_k8s_networking'

# Only download kubernetes images if kubernetes upgrade
- name: Set download images list to kubernetes images if upgrading kubernetes
  set_fact:
    download_images_list: "{{ download_images_list|default([]) + kubernetes_images }}"
  when: mode == 'upgrade_kubernetes'

- name: Set download images list to netapp images if installing trident
  set_fact:
    download_images_list: "{{ download_images_list|default([]) + trident_images + storage_images }}"
  when: mode == 'trident_install'

- set_fact:
    download_images: "{{ download_images_list | join(',') }}"

- debug: var=download_images_list

- name: Set registries information
  set_fact:
    registries:
      "{{ (registries|default({})) | combine({item.default_url:item.replaced_url}, recursive=true)}}"
  with_items:
    - { default_url: 'k8s.gcr.io', replaced_url: "{{ k8s_registry.url }}" }
    - { default_url: 'gcr.io', replaced_url: "{{ gcr_registry.url }}" }
    - { default_url: 'quay.io', replaced_url: "{{ quay_registry.url }}" }
    - { default_url: 'docker.io', replaced_url: "{{ docker_registry.url }}" }
    - { default_url: 'docker.elastic.co', replaced_url: "{{ elastic_registry.url }}" }
    - { default_url: 'ghcr.io', replaced_url: "{{ ghcr_registry.url }}" }

# Disable the log to not expose registry password
- name: Log in k8s, gcr, quay, ghcr, docker registries if credentials exist
  docker_login:
    registry: "{{ item['url'] }}"
    username: "{{ item['username'] }}"
    password: "{{ item['password'] }}"
  register: login_result
  retries: 10
  delay: 5
  until: login_result is succeeded
  with_items:
    - "{{ k8s_registry }}"
    - "{{ gcr_registry }}"
    - "{{ quay_registry }}"
    - "{{ docker_registry }}"
    - "{{ ghcr_registry }}"
  when: item.username is defined
  no_log: true

# Retrieve local registry credentials unless it has been already
- block:
  - name: Get local registry credentials
    vars:
      script_content: |
        import keyring
        password = keyring.get_password("sysinv", "services")
        if not password:
            raise Exception("Local registry password not found.")
        print(dict(username='sysinv', password=str(password)))
    shell: "{{ script_content }}"
    args:
      executable: /usr/bin/python
    register: local_registry_credentials_output

  - set_fact:
      local_registry_credentials: "{{ local_registry_credentials_output.stdout }}"
  when: local_registry_credentials is not defined

- set_fact:
    download_images_task_name: "Download images and push to local registry"

- block:
  - name: Push imported images to local registry
    script: push_imported_images_to_local_registry.py
    register: push_imported_images_output

  - set_fact:
      download_images_task_name: "Download any missing images and push to local registry"

  - debug: var=push_imported_images_output.stdout_lines
  when: images_archive_exists | default(false)

- name: "{{ download_images_task_name }}"
  script: download_images.py {{ download_images }}
  register: download_images_output
  retries: 10
  delay: 5
  until: download_images_output.rc == 0
  environment:
    REGISTRIES: "{{ registries | to_json }}"

- debug:
    msg: "{{ download_images_output.stdout_lines }}"

# Disable the log to not expose registry password
- name: Log out of k8s, gcr, quay, ghcr docker registries if credentials exist
  docker_login:
    registry: "{{ item['url'] }}"
    state: absent
  with_items:
    - "{{ k8s_registry }}"
    - "{{ gcr_registry }}"
    - "{{ quay_registry }}"
    - "{{ docker_registry }}"
    - "{{ ghcr_registry }}"
  when: item.username is defined
  no_log: true
