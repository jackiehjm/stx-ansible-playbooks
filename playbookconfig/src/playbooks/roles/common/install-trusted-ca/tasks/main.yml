---
#
# Copyright (c) 2021-2023 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# These tasks provide the functionality to validate ICA duration and
# install it as a platform Trusted CA.
#
- name: Create root pem temporary file
  tempfile:
    state: file
    prefix: root_
    suffix: .pem
    path: /tmp/
  register: root_ca_file

- name: Create ca pem temporary file
  tempfile:
    state: file
    prefix: ca_
    suffix: .pem
    path: /tmp/
  register: local_ca_file

- name: Save {{ item.name }} certificate to a file
  copy:
    dest: "{{ local_ca_file.path }}"
    content: "{{ item.content | b64decode }}"
    mode: 0640

- block:
  - name: Save system_root_ca_cert to a file
    copy:
      dest: "{{ root_ca_file.path }}"
      content: "{{ system_root_ca_cert | b64decode }}"
      mode: 0640

  - name: Check if system_local_ca_cert is signed by system_root_ca_cert or self-signed
    command: openssl verify -verbose -CAfile {{ root_ca_file.path }} {{ local_ca_file.path }}
    register: ca_verification
    # failed_when as false in order to print a better error msg in the task below
    failed_when: false

  - name: Fail when system_local_ca_cert is not signed by system_root_ca_cert or self-signed
    fail:
      msg: |
        The system_local_ca_cert provided is not signed by
        system_root_ca_cert provided or self-signed.
        Please review your inventory parameters.
    when: ca_verification.rc | int != 0
  when: item.name == 'system_local_ca_cert'

- name: Get CA information from certificate
  shell: |
    openssl x509 -in {{ local_ca_file.path }} -text -noout | grep "CA:"
  register: is_ca

- name: Fail when certificate specified is not an actual CA certificate
  fail:
    msg: The {{ item.name }} certificate provided is not a CA certificate (CA:FALSE)
  when: "'CA:TRUE' not in is_ca.stdout"

- name: Get years for CA duration validation
  set_fact:
    ca_duration: "{{ ca_duration if ca_duration is defined else 3 }}"

- name: Check that CA certificate remaining duration is longer than {{ ca_duration }} years
  shell: |
      expiration_date=$(cat {{ local_ca_file.path }} | openssl x509 -noout -enddate | cut -d'=' -f2)
      expiration_date_timestamp=$(date -d "${expiration_date}" +%s)
      date_5years_from_now_timestamp=$(date -d "+{{ ca_duration }} years" +%s)
      time_left_ica=$(expr $expiration_date_timestamp - $date_5years_from_now_timestamp)
      echo $time_left_ica
  register: ica_time_left

- name: Fail when CA certificate remaining duration is shorter than {{ ca_duration }} years
  fail:
    msg: >-
      The remaining duration for the {{ item.name }} certificate specified
      is less than {{ ca_duration }} years.
      Please use a certificate with a longer validity.
  when: ica_time_left.stdout | int < 0

# ignore_alarms flag can be set to avoid waiting. Defaults to false.
- name: Initialize flag ignore_alarms
  set_fact:
    ignore_alarms: "{{ false if ignore_alarms is not defined else ignore_alarms | bool }}"

- name: Verify if there are 250.001 (config out-of-date) alarms before installing certificate
  block:
  - name: Check if an 250.001 alarm exists and wait it to be cleared
    shell: |
      source /etc/platform/openrc;
      fm alarm-list --query alarm_id=250.001
    register: alarm_subcloud
    retries: 10
    delay: 20
    until: alarm_subcloud.stdout == ""
    failed_when: false

  - name: Fail when the alarm remains
    fail:
      msg: >-
        Timed out waiting 250.001 alarm to clear out.
    when: alarm_subcloud.stdout != ""

  - name: Register stat of .config_applied file
    stat:
      path: /etc/platform/.config_applied
    register: prev_config_applied_stat
  when: not ignore_alarms

- name: Install {{ item.name }} certificate as a Trusted CA certificate
  shell: >-
    source /etc/platform/openrc &&
    system certificate-install -m ssl_ca {{ local_ca_file.path }}
  register: install_cert_output
  until: install_cert_output is not failed
  retries: 3
  delay: 60

- name: Register if a new certificate was installed
  set_fact:
    new_cert_installed: "{{ true if (install_cert_output is search('uuid') and
                                     install_cert_output is search('certtype') and
                                     install_cert_output is search('signature') and
                                     install_cert_output is search('start_date') and
                                     install_cert_output is search('expiry_date') and
                                     install_cert_output is search('subject'))
                            else false }}"

- name: Delete temporary .pem files
  file:
    path: "{{ file_item }}"
    state: absent
  with_items:
    - "{{ local_ca_file.path }}"
    - "{{ root_ca_file.path }}"
  loop_control:
    loop_var: file_item
  become: yes

# If a new trusted CA is installed, sysinv conductor will apply
# platform::config::runtime puppet manifest. This will cause the
# current config to change. We will monitor it through the file
# .config_applied, which is created/changed when a manifest is
# applied.
- name: Wait while the new config is applied by puppet
  block:
  - name: Initialize fail control variable
    set_fact:
      puppet_config_apply_failed: false

  # If the .config_applied file doesn't exist, we wait for it to be created.
  - block:
    - name: Wait for .config_applied file to be created
      stat:
        path: /etc/platform/.config_applied
      register: current_config_applied_stat
      until: current_config_applied_stat.stat.exists
      retries: 10
      delay: 20
      failed_when: false

    - name: Set fail control variable
      set_fact:
        puppet_config_apply_failed: true
      when: not current_config_applied_stat.stat.exists
    when: not prev_config_applied_stat.stat.exists

  # If the .config_applied file exists, we wait for it to change.
  - block:
    - name: Wait for .config_applied file stat to change
      stat:
        path: /etc/platform/.config_applied
      register: current_config_applied_stat
      until: current_config_applied_stat.stat.checksum != prev_config_applied_stat.stat.checksum
      retries: 10
      delay: 20
      failed_when: false

    - name: Set fail control variable
      set_fact:
        puppet_config_apply_failed: true
      when: current_config_applied_stat.stat.checksum == prev_config_applied_stat.stat.checksum
    when: prev_config_applied_stat.stat.exists

  - name: Fail when the manifest apply times out
    fail:
      msg: >-
        Timed out applying puppet runtime manifest. Check sysinv and puppet logs
        for more information and solve any 250.001 alarms before retrying.
    when: puppet_config_apply_failed

  - name: Check if an 250.001 alarm was raised and wait it to be cleared
    shell: |
      source /etc/platform/openrc;
      fm alarm-list --query alarm_id=250.001
    register: alarm_subcloud
    retries: 5
    delay: 20
    until: alarm_subcloud.stdout == ""
    failed_when: false

  - name: Fail when the alarm remains
    fail:
      msg: >-
        Timed out waiting 250.001 alarm to clear out. Check sysinv and puppet logs
        for more information and solve any 250.001 alarms before retrying.
    when: alarm_subcloud.stdout != ""
  when: new_cert_installed and not ignore_alarms
