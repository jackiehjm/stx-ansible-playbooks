---
#
# Copyright (c) 2022-2024 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
#   This role is to validate the target host environment before proceeding
#   to the next step.
#

# Verify if it's controller-0.
# This check must precede the subsequent validations since credentials can't
# be loaded for the remaining checks if it's not the active controller.
- name: Get subcloud active controller
  shell: |
    source /etc/platform/openrc
    system host-show $(cat /etc/hostname) --column hostname --format value
  register: which_ctlr
  failed_when: false # Gracefully handle this error in the next task

- name: Fail if controller-0 is not the active controller
  fail:
    msg: "Rehoming can only be done when controller-0 is active."
  when: which_ctlr.stdout != "controller-0"

# Make sure that it is a subcloud
- name: Get distributed_cloud role
  shell: |
    source /etc/platform/openrc
    system show | grep distributed_cloud_role | awk '{ print $4 }'
  register: distributed_cloud_role

- name: Verify that the target is a subcloud
  fail:
    msg: "The target is not a subcloud. Only subclouds can be rehomed."
  when: distributed_cloud_role.stdout != 'subcloud'

# Verify if the software version supports rehoming
- name: Get software version
  shell: source /etc/build.info; echo $SW_VERSION
  register: host_software_version

- name: Check if the subcloud is running a minimum required software version
  fail:
    msg: "Cannot rehome a subcloud with software version: {{ host_software_version }}."
  when: host_software_version.stdout is version(rehoming_min_software_version, '<')

- name: Get the destination system controller's software version
  shell: source /etc/build.info; echo $SW_VERSION
  register: destination_software_version
  delegate_to: localhost

- name: Fail if the subcloud runs higher software version than the receiving System Controller
  fail:
    msg: >-
      Cannot rehome to a System Controller running a lower
      software version than {{ host_software_version.stdout }}.
  when: host_software_version.stdout is version(destination_software_version.stdout, '>')

# Verify if there is management affecting alarms.
# It checks for column 6 below because that's the column for mgmt_affecting
- name: Check for management affecting alarms
  shell: |
    source /etc/platform/openrc
    fm alarm-list --nowrap --mgmt_affecting | cut -d'|' -f6 | grep True | wc -l
  register: management_alarm_count

- name: Fail when there are management alarms
  fail:
    msg: >-
      The subcloud currently has one or more management affecting alarms. Please
      resolve the alarm condition(s) then try again.
  when: management_alarm_count.stdout | int > 0

# Verify if there is a strategy in an aborted state as aborted strategies don't
# raise management affecting alarms. States that raises mgmt affecting alarms:
# applying, apply-failed, apply-timeout, aborting
- name: Find existing strategies
  shell: |
    source /etc/platform/openrc
    sw-manager {{ item }} show | awk '/state:/ {print $2}' | grep .
  loop: "{{ vim_strategies }}"
  register: result
  failed_when: false
  when: "(result | default({'rc': 1})).rc == 1"

- name: Store the existing strategy
  set_fact:
    existing_strategy: >-
      {{ result.results |
      json_query('[?rc==`0`].{type: item, status: stdout}') |
      first | default(None)}}

- name: Fail if existing strategy is in an aborted state
  fail:
    msg: >-
      The subcloud currently has an aborted {{ existing_strategy.type}}.
      Please resolve the strategy condition then try again.
  when: >
    existing_strategy and existing_strategy.status in
    ["abort-failed", "abort-timeout", "aborted"]
