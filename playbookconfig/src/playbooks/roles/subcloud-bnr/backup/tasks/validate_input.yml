---
#
# Copyright (c) 2022 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# TASKS DESCRIPTION:
#   Validate user input, prepare backup overrides and set facts for subsequent
#   tasks.
#
- name: Fail if mandatory values are mis-configured
  fail:
    msg: "{{ item.key }} parameter must be specified as true or false"
  when: item.key is undefined or item.value|type_debug != 'bool'
  loop:
    - { key: local, value: "{{ local }}" }
    - { key: backup_user_local_registry, value: "{{ backup_user_local_registry }}" }

- name: Fail if custom images backup is requested for centralized backup
  fail:
    msg: "Custom images backup is not supported for centralized backup request."
  when: not local and backup_user_local_registry

- name: Fail if storage location is not specified for centralized backup
  fail:
    msg: "central_backup_dir must be specified if 'local' parameter is set to false."
  when: central_backup_dir is undefined and not local

- name: Create temp file for modified backup overrides
  tempfile:
    state: file
    suffix: "{{ inventory_hostname }}"
  register: bkup_overrides
  connection: local

- name: Copy content of backup overrides to temp file
  copy:
    src: "{{ subcloud_bnr_overrides }}"
    dest: "{{ bkup_overrides.path }}"
    remote_src: no
  connection: local

- name: Set subcloud overrides filename
  set_fact:
    backup_overrides: "{{ bkup_overrides.path }}"

- block:
  - name: Set backup filename prefix in backup overrides file
    lineinfile:
      path: "{{ backup_overrides }}"
      line: "platform_backup_filename_prefix: {{ default_backup_prefix }}"
    # become: yes
    connection: local

  - name: Set backup filename prefix fact
    set_fact:
      platform_backup_filename_prefix: "{{ default_backup_prefix }}"

  when: platform_backup_filename_prefix is undefined

- block:
  - name: Set registry backup filename prefix in backup overrides file
    lineinfile:
      path: "{{ backup_overrides }}"
      line: "docker_local_registry_backup_filename_prefix: {{ default_registry_backup_prefix }}"
    # become: yes
    connection: local

  - name: Set registry backup filename prefix fact
    set_fact:
      docker_local_registry_backup_filename_prefix: "{{ default_registry_backup_prefix }}"

  when: docker_local_registry_backup_filename_prefix is undefined

- name: Retrieve software version number
  shell: source /etc/build.info; echo $SW_VERSION
  register: sw_version_result

- name: Fail if software version is not defined
  fail:
    msg: "SW_VERSION is missing in /etc/build.info"
  when: sw_version_result.stdout_lines|length == 0

- name: Set software version for the backup
  set_fact:
    software_version: "{{ sw_version_result.stdout }}"

- block:
  - name: Update default_local_backup_dir fact
    set_fact:
      default_local_backup_dir: "{{ default_local_backup_dir }}/{{ software_version }}"

  - name: Set backup_dir fact
    set_fact:
      backup_dir: "{{ default_local_backup_dir if local else default_local_staging_dir }}"
  when: backup_dir is undefined

- name: Write backup directory config to overrides file
  lineinfile:
    path: "{{ backup_overrides }}"
    line: "backup_dir: {{ backup_dir }}"
  connection: local

- name: Update central_backup_dir fact
  set_fact:
    central_backup_dir: "{{ central_backup_dir }}/{{ inventory_hostname }}/{{ software_version }}"
  when: not local
