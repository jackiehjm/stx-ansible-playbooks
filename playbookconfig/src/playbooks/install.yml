---
#
# Copyright (c) 2020-2023 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#

- name: Install Playbook
  hosts: all
  gather_facts: false
  become: no

  tasks:
    - set_fact:
        ansible_port: "{{ ansible_port | default(22) }}"
        boot_wait_time: "{{ boot_wait_time | default(600) }}"
        wait_for_timeout: "{{ wait_for_timeout | default(3600) }}"
        job_retry_delay: "{{ 120 | random }}"

    # The following block is executed locally
    - block:
      - name: Start rvmc job
        import_role:
          name: install/apply-rvmc-job

      # In this job retry block, we only initiate retries for job failures or
      # when a job is not found. The retry mechanism for job timeouts is already
      # built into the apply-rvmc-job role.
      - name: Job retry
        block:
        - name: Wait for {{ job_retry_delay }} seconds to retry the rvmc job
          wait_for:
            timeout: "{{ job_retry_delay }}"
          when: wait_for_rvmc.stdout in ['failed', 'not found'] and not credential_failure

        - name: Retry rvmc job
          include_role:
            name: install/apply-rvmc-job
          # Avoid moving the condition out of the task, even though both tasks
          # within the retry block share the same condition. There's an open issue
          # regarding the application of the "when" conditional over a block
          # containing an include_role, which affects all role tasks regardless of
          # the 'apply' status.
          # (Issue link: https://github.com/ansible/ansible/issues/74382)
          when: wait_for_rvmc.stdout in ['failed', 'not found'] and not credential_failure

      - name: Fail if Redfish Virtual Media Controller job returns an error
        fail:
          msg: |
           Failed to install the host via Redfish Virtual Media Controller.
           {{ failure_msg }}
        when: wait_for_rvmc.stdout != "complete"

      delegate_to: localhost

    - debug:
        msg: "Waiting for the system to install..."

    - name: Waiting {{ wait_for_timeout }} seconds for port {{ ansible_port }} become open on {{ ansible_host }}
      local_action:
        module: wait_for
          port={{ ansible_port }}
          host={{ ansible_host }}
          delay={{ boot_wait_time }}
          timeout={{ wait_for_timeout }}
          state=started
          msg="Timeout waiting for {{ ansible_host }}:{{ ansible_port }}. Err_code= wait_install"


- name: Run validate host playbook post install
  import_playbook: validate_host.yml
  vars:
    check_system: true
    check_load: false
    check_bootstrap_address: false
    check_patches: false
    sync_patch_metadata: true
